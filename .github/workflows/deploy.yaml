name: Deploy
run-name: 'deploy: ${{ github.sha }}'
on:
  workflow_dispatch:
    inputs:
      landing_api:
        type: boolean
        required: true
        default: false
        description: Landing api (GraphQL)
      studio_api:
        type: boolean
        required: true
        default: false
        description: Studio api (GraphQL)
      personal_web:
        type: boolean
        required: true
        default: false
        description: Landing web
      studio_web:
        type: boolean
        required: true
        default: false
        description: Studio web
      environment:
        type: choice
        description: Which server environment would you like to deploy?
        options:
          - staging
          - production
jobs:
  deploy-landing-web:
    if: inputs.personal_web == true &&
      (
        (inputs.environment == 'staging') ||
        (inputs.environment == 'production' && 
          (
            startsWith(github.ref, 'refs/heads/release/') || 
            startsWith(github.ref, 'refs/heads/main/') 
          )
        )
      )
    uses: ./.github/workflows/wc-deploy-schema.yaml
    with:
      artifact_name: personal-web-artifact
      environment: ${{ inputs.environment }}
    secrets:
      org_id: ${{ secrets.VERCEL_ORG_ID }}
      project_id: ${{ secrets.VERCEL_WEB_LANDING_ID }}
      token: ${{ secrets.VERCEL_TOKEN }}
  
  deploy-studio-web:
    runs-on: ubuntu-latest
    if: inputs.studio_web == true
    env:
      NODE_ENV: ${{ inputs.environment }}
      SANITY_AUTH_TOKEN: ${{ secrets.SANITY_AUTH_TOKEN }}
      SANITY_STUDIO_PROJECT_ID: ${{ secrets.SANITY_STUDIO_PROJECT_ID }}
      SANITY_STUDIO_DATASET: ${{ secrets.SANITY_STUDIO_DATASET }}
      SANITY_STUDIO_HOST: ${{ secrets.SANITY_STUDIO_HOST }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: ./.github/actions/setup

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Build
        run: npx nx run @oxcyn-apps/web-studio-blog:build
      
      - name: Deploy
        run: npx nx run @oxcyn-apps/web-studio-blog:deploy:ci
  
  deploy-studio-api:
    runs-on: ubuntu-latest
    if: inputs.studio_api
    env:
      SANITY_AUTH_TOKEN: ${{ secrets.SANITY_AUTH_TOKEN }}
      SANITY_STUDIO_PROJECT_ID: ${{ secrets.SANITY_STUDIO_PROJECT_ID }}
      SANITY_STUDIO_DATASET: ${{ secrets.SANITY_STUDIO_DATASET }}
      SANITY_STUDIO_HOST: ${{ secrets.SANITY_STUDIO_HOST }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - uses: ./.github/actions/setup

      - name: Install deps
        run: pnpm install --no-frozen-lockfile
      
      - name: Set GIT_BRANCH env
        run: |
          branch_name=$(git branch --show-current)
          echo "GIT_BRANCH=$branch_name" >> $GITHUB_ENV
      
      - name: Deploy
        env:
          NODE_ENV: ${{ inputs.environment }}
        run: npx nx run @oxcyn-apps/web-studio-blog:deploy-graphql:ci

  deploy-landing-api:
    if: inputs.landing_api == true &&
      (
        (inputs.environment == 'staging') ||
        (inputs.environment == 'production' && 
          (
            startsWith(github.ref, 'refs/heads/release/') || 
            startsWith(github.ref, 'refs/heads/main/') 
          )
        )
      )
    uses: ./.github/workflows/wc-deploy-schema.yaml
    with:
      artifact_name: landing-api-artifact
      environment: ${{ inputs.environment }}
      pre_built: true
      pre_built_cmd: |
        pnpm i
        npx nx build @oxcyn-apps/landing-api
    secrets:
      org_id: ${{ secrets.VERCEL_ORG_ID }}
      project_id: ${{ secrets.VERCEL_API_LANDING_ID }}
      token: ${{ secrets.VERCEL_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [
      deploy-landing-web, 
      deploy-studio-web, 
      deploy-landing-api,
      deploy-studio-api
    ]
    steps:
      - uses: actions/checkout@v4

      - name: Set Slack Color
        id: slack_status
        shell: bash
        run: |
          results=(
            "${{ needs.deploy-landing-web.result }}"
            "${{ needs.deploy-studio-web.result }}"
            "${{ needs.deploy-studio-api.result }}"
            "${{ needs.deploy-landing-api.result }}"
          )
          
          if [[ " ${results[@]} " =~ "success" ]]; then
            echo color=good >> $GITHUB_OUTPUT
            echo status=passed >> $GITHUB_OUTPUT
          else
            echo color=danger >> $GITHUB_OUTPUT
            echo status=failed >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_CI_DEPLOYMENT }}
          SLACK_COLOR: ${{ steps.slack_status.outputs.color }}
          SLACK_MESSAGE: |
            - *Branch:* ${{ github.ref_name }}
            - *Status:* `${{ steps.slack_status.outputs.color == 'good' && 'passed ✅' || 'failed ❌' }}`
            - *Env:* `${{ inputs.environment }}`
            - *By:* `${{ github.actor }}`

            - *Landing Web:* `${{ needs.deploy-landing-web.outputs.deployment_url || 'N/A' }}`
            - *Landing API:* `${{ needs.deploy-landing-api.outputs.deployment_url || 'N/A' }}`

            - [View Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})