#!/usr/bin/env bash

set -euo pipefail

githubBaseUrl="https://github.com/itsferdiardiansa/Oxcyn"
workspaceName=""
pkgJson=""
previousVersion=""
latestVersion=""
tagVersion=""
pullRequestUrl=""

declare -A commands=(
  [type]="" 
  [workspace]=""
  [path]=""
)

updateVersion() {
  dirPath="${commands[workspace]}/${commands[path]}"

  sed -i "s/\"version\": \".*\"/\"version\": \"$latestVersion\"/" ${pkgJson}

  git add ${dirPath}
  git commit -m "chore(deps): release ${tagVersion}"
}

createPullRequestTemplate() {
  echo "
This pull request contains the following updates:

| Packages/Apps  | Update |  Change  |
|----------------|--------|----------|
| [${workspaceName}](${githubBaseUrl}/tree/main/${commands[workspace]}/${commands[path]})  |  ${commands[type]}   |  \`${previousVersion}\` to \`${latestVersion}\` |

---

# **Release Notes**
<!-- Describe changes --->
## **[${tagVersion}](${githubBaseUrl}/releases/tag/${tagVersion})**

- ...

---

This pull request has been generated by **Github Actions.**
  " >  PULL_REQUEST_TEMPLATE.md
}

createPullRequest() {
  branchName="release/${tagVersion}"

  git fetch

  git checkout -b ${branchName}

  updateVersion  
  createPullRequestTemplate

  git push origin ${branchName} -f

  pullRequestUrl=$(gh pr create -B main -t "release: ${tagVersion}" --head ${branchName} --body-file ./PULL_REQUEST_TEMPLATE.md)
}

genereteVersion() {
  pkgJson="${commands[workspace]}/${commands[path]}/package.json"
  latestVersion=$(jq -r .version ${pkgJson})
  previousVersion="${latestVersion}"
  workspaceName=$(jq -r .name ${pkgJson})

  if [ -z "$latestVersion" ]; then
    latestVersion="0.0.0"
  fi

  if [ "${commands[type]}" = "patch" ]; then
    latestVersion="$(echo "$latestVersion" | awk -F. '{$NF++; print $1"."$2"."$NF}')"
  elif [ "${commands[type]}" = "minor" ]; then
    latestVersion="$(echo "$latestVersion" | awk -F. '{$2++; $3=0; print $1"."$2"."$3}')"
  elif [ "${commands[type]}" = "major" ]; then
    latestVersion="$(echo "$latestVersion" | awk -F. '{$1++; $2=0; $3=0; print $1"."$2"."$3}')"
  else
    printf "\nError: invalid VERSION_TYPE arg passed, must be 'patch', 'minor' or 'major'\n\n"
    exit 1
  fi

  tagVersion="${workspaceName}-${latestVersion}"

  echo "Successfully generated the latest version of ${workspaceName} to => ${latestVersion}"
}

populateArguments() {
  for cmd in "$@";
  do
    cmd="${cmd:2}"
    IFS="=" read -a formattedValue <<< "${cmd//, ,}"
    declare -p formattedValue

    type="${formattedValue[0]}"
    value="${formattedValue[1]}"

    commands[${type}]=${value}
  done
}

run() {
  echo "Running release tasks..."

  populateArguments "$@"
  genereteVersion

  # Execute git commands
  createPullRequest
}

run "$@"